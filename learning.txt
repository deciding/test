root object:uppermost level of mapping
	typename
		properties
			field
				type
				index(analyzed,not_analyzed,no)
				analyzer
		_source
			enabled:true/false(it is a stored field, will waste disk space)
		_all
			enabled:true/false
			-->include_in_all
			{
			    "my_type": {
			        "include_in_all": false,
			        "properties": {
			            "title": {
			                "type":           "string",
			                "include_in_all": true
			            },
			            ...
			        }
			    }
			}
		_id,_type,_index,_uid settings for each doc
			_id,_index does not exist(not stored/retrievable, not indexed/searchable)
			_type indexed not stored,
			_uid stored and searchable

		#dynamic mapping
		dynamic strict
		properties
			fieldname(can add new field inside)
				type object
				dynamic true

		#customize dynamic mapping
		date_detection false

		"dynamic_templates": [
                { "es": {
                      "match":              "*_es", #fieldname match, first come just match
                      "match_mapping_type": "string", #use default mapping
                      "mapping": {
                          "type":           "string",
                          "analyzer":       "spanish"
                      }
                }},
                { "en": {
                      "match":              "*", 
                      "match_mapping_type": "string",
                      "mapping": {
                          "type":           "string",
                          "analyzer":       "english"
                      }
                }}
            ]
        not only "match", we can use "path_match", "unmatch", "path_unmatch"

#default mapping
{
    "mappings": {
        "_default_": { # only for types come after it
            "_all": { "enabled":  false }
        },
        "blog": {
            "_all": { "enabled":  true  }
        }
    }
}

#reindex
to change the field, we cannot edit them, otherwisethe index would break
bcoz of _source, we don't need to query db again
use scroll&bulk
GET /old_index/_search?scroll=1m
use timestamp to split tasks
{
    "query": {
        "range": {
            "date": {
                "gte":  "2014-01-01",
                "lt":   "2014-02-01"
            }
        }
    },
    "sort": ["_doc"],
    "size":  1000
}

#index alias and zero downtime
PUT /my_index_v1 
PUT /my_index_v1/_alias/my_index 

GET /*/_alias/my_index
GET /my_index_v1/_alias/*

reindex to my_index_v2

POST /_aliases #atomic operation
{
    "actions": [
        { "remove": { "index": "my_index_v1", "alias": "my_index" }},
        { "add":    { "index": "my_index_v2", "alias": "my_index" }}
    ]
}




Inside a shard

#Making Text Searchable
every field have an inverted index
in inverted index, it contains a lot of statistics data
inside that shard, the inverted index is immutable, every time we add new doc, it will need to index again

#Dynamically Updatable Indices
use more than one index in the lucene shard to avoid reindex when adding new doc
lucene use per-segment search
  segments
  commit point
  in-memory buffer
es index -> shard(lucene index)
create new doc: commit the buffer(I guess when a search request arrived) using fsync
delete/update: record in .del file in the commit point, delete these records from search result when there is new search

#Near Real-Time Search
fsync make it slow to make the new doc searchable
ES in memory indexing buffer --> new segment(refresh) in filesystem cache--> Disk
refresh happens every second
POST /_refresh 
POST /blogs/_refresh 
PUT /my_logs
{
  "settings": {
    "refresh_interval": "30s" #2m, -1
  }
}

#Making Changes Persistent
use translog to record the diffs btw two commits
it stores all the changes thats in the buffer or cache, but haven't been flushed to the disk to avoid server shutdown problems
translog is cleared after each commit(commit+clear translog=flush)
flush every 30m or translog too large
POST /blogs/_flush 
POST /_flush?wait_for_ongoing
it's better to flush before close index/node, since it need us to replay the translog when reopen the index
for fsync the request to translog, it is every 5s and after each request

#Segment Merging
otherwise will be very slow
merge segments of similar size in the background
the lazy deleted docs are not copied
merged segment at first is not searchable since not refreshed, but it will be flushed
new commit point created and old segments deleted
POST /logstash-2014-10/_optimize?max_num_segments=1 
this is perticularly useful for log, since log hardly changes
optimize is foreground while automatic merge is background










--Search in Depth

Structured Search
structure value, range, compare
yes or no

#Finding Exact Values
filter:cache, no score
term query:
{
    "query" : {
        "constant_score" : { 
            "filter" : {
                "term" : { 
                    "price" : 20
                }
            }
        }
    }
}
when match analyzed with exact value, normally there will be no match, since that exact token is not in the inverted index
filter workflow:
search in inverted index --> roaring bitmap --> combine bitset(start from sparse) --> cache for not too small segment
filter first, scoring later

#Combining filters
in filter, for bool
	must: inside is "and"
	must_not: "not"
	should: inside is "or"
	filter: inside is "and" but useless since already in filter
WHERE  (price = 20 OR productID = "XHDK-A-1293-#fJ3")
  AND  (price != 30):
{
   "query" : {
      "constant_score" : { 
         "filter" : {
            "bool" : {
              "should" : [
                 { "term" : {"price" : 20}}, 
                 { "term" : {"productID" : "XHDK-A-1293-#fJ3"}} 
              ],
              "must_not" : {
                 "term" : {"price" : 30} 
              }
           }
         }
      }
   }
}
nested query
WHERE  productID      = "KDKE-B-9947-#kL5"
  OR (     productID = "JODL-X-1937-#pV7"
       AND price     = 30 ):
{
   "query" : {
      "constant_score" : {
         "filter" : {
            "bool" : {
              "should" : [
                { "term" : {"productID" : "KDKE-B-9947-#kL5"}}, 
                { "bool" : { 
                  "must" : [
                    { "term" : {"productID" : "JODL-X-1937-#pV7"}}, 
                    { "term" : {"price" : 30}} 
                  ]
                }}
              ]
           }
         }
      }
   }
}

#Finding Multiple Exact Values
terms:[], means any field contains one of the data
term query means contains, not equal to
if we want contains exact that one data, we may need another field to indicate term count

#Ranges
{
    "query" : {
        "constant_score" : {
            "filter" : {
                "range" : {
                    "price" : {
                        "gte" : 20,
                        "lt"  : 40
                    }
                }
            }
        }
    }
}
time:
"range" : {
    "timestamp" : {
        "gt" : "2014-01-01 00:00:00",
        "lt" : "2014-01-07 00:00:00"
    }
}
"range" : {
    "timestamp" : {
        "gt" : "now-1h"
    }
}
"range" : {
    "timestamp" : {
        "gt" : "2014-01-01 00:00:00",
        "lt" : "2014-01-01 00:00:00||+1M" 
    }
}
string:
alphabetic order since string inverted index is stored in this order
string range filter is slower than date/number bcoz it is term filters on each term in the range

#Dealing with Null Values
exists query:
{
    "query" : {
        "constant_score" : {
            "filter" : {
                "exists" : { "field" : "tags" }
            }
        }
    }
}
missing query:
{
    "query" : {
        "constant_score" : {
            "filter": {
                "missing" : { "field" : "tags" }
            }
        }
    }
}
*but the info of null is missed since it's not indexed. to explictly specify null, we use null_value
for inner objects
{
   "name.first" : "John",
   "name.last"  : "Smith"
}
{
    "exists" : { "field" : "name" }
}
is equivalent to 
{
    "bool": {
        "should": [
            { "exists": { "field": "name.first" }},
            { "exists": { "field": "name.last" }}
        ]
    }
}

#All About Caching
filter cache will update with new doc
{
  "query": {
      "constant_score": {
          "filter": {
              "bool": {
                 "should": [
                    { "bool": {
                          "must": [
                             { "term": { "folder": "inbox" }}, #1
                             { "term": { "read": false }}
                          ]
                    }},
                    { "bool": {
                          "must_not": {
                             "term": { "folder": "inbox" } #2
                          },
                          "must": {
                             "term": { "important": true }
                          }
                    }}
                 ]
              }
            }
        }
    }
}
1,2 reuse
cache behavior: based on usage, only for large segment
cache eviction: LRU






Full Text Search
Relevance+Analysis

#Term-based Versus Full-Text
Term-based: (low level)no analyze just search the exact term. score will be caculated in TF/IDF
Full-text: (high level)judge --> analyze --> use low level query + assemble +score
for non-filter, we'd better not use term-based query

#match query
check type --> analyze --> term query --> calculate score TF/IDF * Len Norm

#Multiword Queries
just combine with bool
improving precesion:
{
    "query": {
        "match": {
            "title": {      
                "query":    "BROWN DOG!",
                "operator": "and"
            }
        }
    }
}
{
  "query": {
    "match": {
      "title": {
        "query":                "quick brown dog",
        "minimum_should_match": "75%"
      }
    }
  }
}

#Combining Queries
diff from filter combine, "should" are not required fileds, they just increase relevance
calculate score: add up all scores of "must" and "should", and divide them by "must" "should" clause count
precision: no "should" must needed, but if no "must" at least one field in "should" is needed
{
  "query": {
    "bool": {
      "should": [
        { "match": { "title": "brown" }},
        { "match": { "title": "fox"   }},
        { "match": { "title": "dog"   }}
      ],
      "minimum_should_match": 2 # at least how many clauses should match
    }
  }
}

#How match Uses bool
{
    "match": { "title": "brown fox"}
}
<=>
{
  "bool": {
    "should": [
      { "term": { "title": "brown" }},
      { "term": { "title": "fox"   }}
    ]
  }
}
{
    "match": {
        "title": {
            "query":    "brown fox",
            "operator": "and"
        }
    }
}
<=>
{
  "bool": {
    "must": [
      { "term": { "title": "brown" }},
      { "term": { "title": "fox"   }}
    ]
  }
}
{
    "match": {
        "title": {
            "query":                "quick brown fox",
            "minimum_should_match": "75%"
        }
    }
}
<=>
{
  "bool": {
    "should": [
      { "term": { "title": "brown" }},
      { "term": { "title": "fox"   }},
      { "term": { "title": "quick" }}
    ],
    "minimum_should_match": 2 
  }
}

#Boosting Query Clauses
{
    "query": {
        "bool": {
            "must": {
                "match": {  
                    "content": {
                        "query":    "full text search",
                        "operator": "and"
                    }
                }
            },
            "should": [
                { "match": {
                    "content": {
                        "query": "Elasticsearch",
                        "boost": 3 
                    }
                }},
                { "match": {
                    "content": {
                        "query": "Lucene",
                        "boost": 2 
                    }
                }}
            ]
        }
    }
}
*boost default is one
*boost in [0,1) is to decrease the weight

#Controlling Analysis
index analyzer finding order: field --> index --> global default(standard)
query analyzer finding order: query --> field --> index --> global default(standard)
full query analyzer finding order:
	The analyzer defined in the query itself, else
	The search_analyzer defined in the field mapping, else
	The analyzer defined in the field mapping, else
	The analyzer named default_search in the index settings, which defaults to
	The analyzer named default in the index settings, which defaults to
	The standard analyzer

#Relevance Is Broken!
IDF is calculated based on shard not index, if the docs are evenly distributed between shards, the result may not correct sorted.
we can use ?search_type=dfs_query_then_fetch to use global IDF, but don't use it in production






Multifield Search(Advanced Search)

#Multiple Query Strings
when we know which term should belong to which field
bool score: add, multiply match clauses, divide total clauses
same level of bool divide the weight
boost:
{ "match": { 
            "title":  {
              "query": "War and Peace",
              "boost": 2
        }}}

#Single Query String
Best fields
Most fields
Cross fields

#Best fields
“Brown fox” -->
{
    "query": {
        "bool": {
            "should": [
                { "match": { "title": "Brown fox" }},
                { "match": { "body":  "Brown fox" }}
            ]
        }
    }
}
makes
"title": "brown",
"body":  "Brown"
higher than
{
    "title": "",
    "body":  "brown fox"
}
but we want best field
dis_max:
{
    "query": {
        "dis_max": {
            "queries": [
                { "match": { "title": "Brown fox" }},
                { "match": { "body":  "Brown fox" }}
            ]
        }
    }
}
it will not combine scores, but will choose best matching query as the score of one doc

#Tuning Best Fields Queries
{
    "query": {
        "dis_max": {
            "queries": [
                { "match": { "title": "Quick pets" }},
                { "match": { "body":  "Quick pets" }}
            ],
            "tie_breaker": 0.3
        }
    }
}
get best matching clause _score + other matching clauses _score * 0.3 -> normalize

#multi_match Query
and:conjunction
or:disjunction
since dis_max use same query on different fields, it's redundant
we can use multi_match, best_fields is default
{
    "multi_match": {
        "query":                "Quick brown fox",
        "type":                 "best_fields", 
        "fields":               [ "title", "body" ],
        "tie_breaker":          0.3,
        "minimum_should_match": "30%" 
    }
}
wildcard
{
    "multi_match": {
        "query":  "Quick brown fox",
        "fields": "*_title"
    }
}
boost
{
    "multi_match": {
        "query":  "Quick brown fox",
        "fields": [ "*_title", "chapter_title^2" ] 
    }
}

#Most Fields
main field(broad) and signal fields(narrower, just for adding score)
multifield mapping:
{
    "settings": { "number_of_shards": 1 }, 
    "mappings": {
        "my_type": {
            "properties": {
                "title": { 
                    "type":     "string",
                    "analyzer": "english", #stemmed
                    "fields": {
                        "std":   { 
                            "type":     "string",
                            "analyzer": "standard" #not stemmed
                        }
                    }
                }
            }
        }
    }
}
-->
{
   "query": {
        "multi_match": {
            "query":  "jumping rabbits",
            "type":   "most_fields", 
            "fields": [ "title^10", "title.std" ]
        }
    }
}
use "bool" should

#Cross-fields Entity Search
A Naive Approach
{
  "query": {
    "multi_match": {
      "query":       "Poland Street W1V",
      "type":        "most_fields",
      "fields":      [ "street", "city", "country", "postcode" ]
    }
  }
}

#Field-Centric Queries(but we want term-centric queries)
Problem 1: Matching the Same Word in Multiple Fields
Problem 2: Trimming the Long Tail
  operator and
  minimum_should_match n
Problem 3: Term Frequencies
  some fields have high IDF on some words
Solution: combine the fields

#Custom _all Fields(index time solution)
copy_to 
{
    "mappings": {
        "person": {
            "properties": {
                "first_name": {
                    "type":     "string",
                    "copy_to":  "full_name" 
                },
                "last_name": {
                    "type":     "string",
                    "copy_to":  "full_name" 
                },
                "full_name": {
                    "type":     "string"
                }
            }
        }
    }
}
we cannot copy from a multi-field, since its just a different way of storing the field, it has no source

#cross-fields Queries(search time solution)
GET /_validate/query?explain
{
    "query": {
        "multi_match": {
            "query":       "peter smith",
            "type":        "cross_fields", 
            "operator":    "and",
            "fields":      [ "first_name", "last_name" ]
        }
    }
}
-->
+blended("peter", fields: [first_name, last_name])
+blended("smith", fields: [first_name, last_name])
use min of IDF of two fields
if we added the title field to the preceding query (assuming it uses a different analyzer)
(+title:peter +title:smith)
(
  +blended("peter", fields: [first_name, last_name])
  +blended("smith", fields: [first_name, last_name])
)
advantage over custom _all field:Per-Field Boosting
GET /books/_search
{
    "query": {
        "multi_match": {
            "query":       "peter smith",
            "type":        "cross_fields",
            "fields":      [ "title^2", "description" ] 
        }
    }
}

#Exact-Value Fields
don't use not_analyzed in multi-field search, it can never be found






Proximity Matching(phrase matching)

#Phrase Matching
{
    "query": {
        "match_phrase": {
            "title": "quick brown fox"
        }
    }
}
contains all terms and in same relative positions

#Mixing It Up
slop
{
    "query": {
        "match_phrase": {
            "title": {
                "query": "quick fox",
                "slop":  1
            }
        }
    }
}
slop means how many steps of movement from one phrase to another one

#Multivalue Fields
array elements are adjacent in position
PUT /my_index/_mapping/groups 
{
    "properties": {
        "names": {
            "type":                "string",
            "position_increment_gap": 100
        }
    }
}
to make position increase more for array element

#Closer Is Better
closer has higher _score

#Proximity for Relevance
all terms must show up is too restrictive.
{
  "query": {
    "bool": {
      "must": {
        "match": { 
          "title": {
            "query":                "quick brown fox",
            "minimum_should_match": "30%"
          }
        }
      },
      "should": {
        "match_phrase": { 
          "title": {
            "query": "quick brown fox",
            "slop":  50
          }
        }
      }
    }
  }
}
this may be better

#Improving Performance
proximity matching is expensive
The rescore phase allows you to apply a more expensive scoring algorithm—like a phrase query—to just the top K results from each shard
{
    "query": {
        "match": {  
            "title": {
                "query":                "quick brown fox",
                "minimum_should_match": "30%"
            }
        }
    },
    "rescore": {
        "window_size": 50, # 50 top result per shard
        "query": {         
            "rescore_query": {
                "match_phrase": {
                    "title": {
                        "query": "quick brown fox",
                        "slop":  50
                    }
                }
            }
        }
    }
}

#Finding Associated Words
index shingles instead of single words
PUT /my_index
{
    "settings": {
        "number_of_shards": 1,  
        "analysis": {
            "filter": {
                "my_shingle_filter": {
                    "type":             "shingle",
                    "min_shingle_size": 2, 
                    "max_shingle_size": 2, 
                    "output_unigrams":  false   # by default bigrams also include unigrams, but we want a seperate one
                }
            },
            "analyzer": {
                "my_shingle_analyzer": {
                    "type":             "custom",
                    "tokenizer":        "standard",
                    "filter": [
                        "lowercase",
                        "my_shingle_filter" 
                    ]
                }
            }
        }
    }
}
PUT /my_index/_mapping/my_type
{
    "my_type": {
        "properties": {
            "title": {
                "type": "string",
                "fields": {
                    "shingles": {
                        "type":     "string",
                        "analyzer": "my_shingle_analyzer"
                    }
                }
            }
        }
    }
}
GET /my_index/my_type/_search
{
   "query": {
      "bool": {
         "must": {
            "match": {
               "title": "the hungry alligator ate sue"
            }
         },
         "should": {
            "match": {
               "title.shingles": "the hungry alligator ate sue"
            }
         }
      }
   }
}
more at index time -> less at search time
